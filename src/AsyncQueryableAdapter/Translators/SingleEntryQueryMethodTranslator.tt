/* License
 * --------------------------------------------------------------------------------------------------------------------
 * (C) Copyright 2021 Cato Léan Trütschel and contributors 
 * (https://github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * --------------------------------------------------------------------------------------------------------------------
 */

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
<#
    var operations = new [] { "First", "Last", "Single" };
#>
using System.Linq.Expressions;
using System.Threading;
using AsyncQueryableAdapter.Utils;

namespace AsyncQueryableAdapter.Translators
{
<#
foreach(var operation in operations)
{
#>
    internal sealed class <#=operation#>MethodTranslator : SingleEntryQueryMethodTranslator
    {
        protected override string OperationName => "<#=operation#>";

        protected override ConstantExpression ProcessOperation(
            TranslatedQueryable translatedQueryable,
            bool returnDefaultOnNoMatch,
            Expression? predicate,
            CancellationToken cancellation)
        {
            var elementType = translatedQueryable.ElementType;
            var returnType = TypeHelper.GetValueTaskType(elementType);
            var queryable = translatedQueryable.GetQueryable();
            AsyncTypeAwaitable evaluationResult;

            if (predicate is null)
            {
                if (returnDefaultOnNoMatch)
                {
                    evaluationResult = translatedQueryable.QueryAdapter.<#=operation#>OrDefaultAsync(
                       elementType,
                       queryable,
                       cancellation);
                }
                else
                {
                    evaluationResult = translatedQueryable.QueryAdapter.<#=operation#>Async(
                         elementType,
                         queryable,
                         cancellation);
                }
            }
            else
            {
                if (returnDefaultOnNoMatch)
                {
                    evaluationResult = translatedQueryable.QueryAdapter.<#=operation#>OrDefaultAsync(
                       elementType,
                       queryable,
                       predicate,
                       cancellation);
                }
                else
                {
                    evaluationResult = translatedQueryable.QueryAdapter.<#=operation#>Async(
                      elementType,
                      queryable,
                      predicate,
                      cancellation);
                }
            }

            return Expression.Constant(evaluationResult.Instance, returnType);
        }
    }
<#
}
#>
}