/* License
 * --------------------------------------------------------------------------------------------------------------------
 * (C) Copyright 2021 Cato Léan Trütschel and contributors 
 * (https://github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * --------------------------------------------------------------------------------------------------------------------
 */

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
<#
    var mathAggregateOperations = new [] { "Min", "Max", "Sum", "Average" };
    var singleEntryQueryOperations = new [] { "First", "FirstOrDefault", "Last", "LastOrDefault", "Single", "SingleOrDefault" };
#>
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter.Utils;

namespace AsyncQueryableAdapter
{
    partial class QueryAdapterBase
    {
        partial interface IGenericElementTypeQueryAdapter
        {
<#
foreach(var mathAggregateOperation in mathAggregateOperations)
{
#>
            AsyncTypeAwaitable <#=mathAggregateOperation#>Async(QueryAdapterBase queryAdapter, IQueryable source, CancellationToken cancellation);

<#
}
#>

<#
foreach(var singleEntryQueryOperation in singleEntryQueryOperations)
{
#>
            AsyncTypeAwaitable <#=singleEntryQueryOperation#>Async(QueryAdapterBase queryAdapter, IQueryable source, CancellationToken cancellation);

            AsyncTypeAwaitable <#=singleEntryQueryOperation#>Async(QueryAdapterBase queryAdapter, IQueryable source, Expression predicate, CancellationToken cancellation);

<#
}
#>
        }

        partial class GenericQueryAdapter<T>
        {
<#
foreach(var mathAggregateOperation in mathAggregateOperations)
{
#>
            public AsyncTypeAwaitable <#=mathAggregateOperation#>Async(QueryAdapterBase queryAdapter, IQueryable source, CancellationToken cancellation)
            {
                if (source is not IQueryable<T> typedQueryable)
                {
                    typedQueryable = source.Cast<T>();
                }

                var task =  queryAdapter.<#=mathAggregateOperation#>Async(typedQueryable, cancellation);
                return task.AsTypeAwaitable();
            }

<#
}
#>

<#
foreach(var singleEntryQueryOperation in singleEntryQueryOperations)
{
#>
            public AsyncTypeAwaitable <#=singleEntryQueryOperation#>Async(QueryAdapterBase queryAdapter, IQueryable source, CancellationToken cancellation)
            {
                if (source is not IQueryable<T> typedQueryable)
                {
                    typedQueryable = source.Cast<T>();
                }

                var task = queryAdapter.<#=singleEntryQueryOperation#>Async(typedQueryable, cancellation);
                return task.AsTypeAwaitable();
            }

            public AsyncTypeAwaitable <#=singleEntryQueryOperation#>Async(
                QueryAdapterBase queryAdapter,
                IQueryable source,
                Expression predicate,
                CancellationToken cancellation)
            {
                if (source is not IQueryable<T> typedQueryable)
                {
                    typedQueryable = source.Cast<T>();
                }

                if (predicate is UnaryExpression unaryExpression && unaryExpression.NodeType == ExpressionType.Quote)
                {
                    predicate = unaryExpression.Operand;
                }
                
                // TODO: Can we convert the selector if it is not of the appropriate type?
                var task = queryAdapter.<#=singleEntryQueryOperation#>Async(typedQueryable, (Expression<Func<T, bool>>)predicate, cancellation);
                return task.AsTypeAwaitable();
            }
<#
}
#>
        }

        partial interface IGenericElementResultTypeQueryAdapter
        {
<#
foreach(var mathAggregateOperation in mathAggregateOperations)
{
#>
            AsyncTypeAwaitable <#=mathAggregateOperation#>Async(
                QueryAdapterBase queryAdapter,
                IQueryable source,
                Expression selector,
                CancellationToken cancellation);

<#
}
#>
        }

        partial class GenericQueryAdapter<TSource, TResult>
        {
<#
foreach(var mathAggregateOperation in mathAggregateOperations)
{
#>
            public AsyncTypeAwaitable <#=mathAggregateOperation#>Async(
                QueryAdapterBase queryAdapter,
                IQueryable source,
                Expression selector,
                CancellationToken cancellation)
            {
                if (source is not IQueryable<TSource> typedQueryable)
                {
                    typedQueryable = source.Cast<TSource>();
                }

                if (selector is UnaryExpression unaryExpression && unaryExpression.NodeType == ExpressionType.Quote)
                {
                    selector = unaryExpression.Operand;
                }

                // TODO: Can we convert the selector if it is not of the appropriate type?
                var task = queryAdapter.<#=mathAggregateOperation#>Async(typedQueryable, (Expression<Func<TSource, TResult>>)selector, cancellation);
                return task.AsTypeAwaitable();
            }

<#
}
#>      
        }
    }
}
