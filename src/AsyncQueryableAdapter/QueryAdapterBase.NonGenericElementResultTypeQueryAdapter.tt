<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
<#
    var mathAggregateOperations = new [] { "Min", "Max", "Sum", "Average" };
#>
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter.Utils;

namespace AsyncQueryableAdapter
{
    partial class QueryAdapterBase
    {
        partial interface INonGenericElementResultTypeQueryAdapter
        {
<#
foreach(var mathAggregateOperation in mathAggregateOperations)
{
#>
            AsyncTypeAwaitable <#=mathAggregateOperation#>Async(
                QueryAdapterBase queryAdapter,
                IQueryable source,
                Expression selector,
                CancellationToken cancellation);

<#
}
#>
        }

        partial class NonGenericElementResultTypeQueryAdapter<TSource, TResult>
        {
<#
foreach(var mathAggregateOperation in mathAggregateOperations)
{
#>
            public AsyncTypeAwaitable <#=mathAggregateOperation#>Async(
                QueryAdapterBase queryAdapter,
                IQueryable source,
                Expression selector,
                CancellationToken cancellation)
            {
                if (source is not IQueryable<TSource> typedQueryable)
                {
                    typedQueryable = source.Cast<TSource>();
                }

                if (selector is UnaryExpression unaryExpression && unaryExpression.NodeType == ExpressionType.Quote)
                {
                    selector = unaryExpression.Operand;
                }

                // TODO: Can we convert the selector if it is not of the appropriate type?
                var task = queryAdapter.<#=mathAggregateOperation#>Async(typedQueryable, (Expression<Func<TSource, TResult>>)selector, cancellation);
                return task.AsTypeAwaitable();
            }

<#
}
#>      
        }
    }
}
