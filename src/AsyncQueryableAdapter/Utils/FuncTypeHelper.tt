<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>
using System;
using System.Collections.Immutable;

namespace AsyncQueryableAdapter.Utils
{
    internal static partial class FuncTypeHelper
    {
        private static partial ImmutableList<Type> BuildFuncTypeDefinitions()
        {
            var builder = ImmutableList.CreateBuilder<Type>();

<#
for (var i = 0; i <= 16; i++)
{
#>
            builder.Add(typeof(Func<<#=new string(',', i)#>>));
<#
}
#>

            return builder.ToImmutable();
        }
<#
for (var i = 0; i <= 16; i++)
{
#>

        [ThreadStatic]
        private static Type[]? _<#=i+1#>EntryTypeBuffer;

        public static Type GetFuncType(
<#
for (var j = 0; j < i; j++)
{
#>
            Type t<#=j+1#>,
<#
}
#>
            Type resultType)
        {
            _<#=i+1#>EntryTypeBuffer ??= new Type[<#=i+1#>];
<#
for (var j = 0; j < i; j++)
{
#>
            _<#=i+1#>EntryTypeBuffer[<#=j#>] = t<#=j+1#>;
<#
}
#>
            _<#=i+1#>EntryTypeBuffer[<#=i#>] = resultType;
            return typeof(Func<<#=new string(',', i)#>>).MakeGenericType(_<#=i+1#>EntryTypeBuffer);
        }
<#
}
#>

        public static Type GetFuncType(ReadOnlySpan<Type> types, Type resultType)
        {
            Type[] arr;

            switch (types.Length)
            {
<#
for (var i = 0; i <= 16; i++)
{
#>
                case <#=i#>:
                    _<#=i+1#>EntryTypeBuffer ??= new Type[<#=i+1#>];
                    arr = _<#=i+1#>EntryTypeBuffer;
                    break;
<#
}
#>
                default:
                    throw new ArgumentException("A Func type for the specified amount of parameters is not defined.");
            }

            types.CopyTo(arr.AsSpan()[..^1]);
            arr[^1] = resultType;

            return _funcTypeDefinitions[types.Length].MakeGenericType(arr);
        }
    }
}