# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = true

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# this. and Me. preferences
dotnet_style_qualification_for_event = false:suggestion
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_property = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# Expression-level preferences
csharp_style_deconstructed_variable_declaration = true:silent
csharp_style_inlined_variable_declaration = true:warning
csharp_style_throw_expression = false:silent
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_interpolation = true:error

# Field preferences
dotnet_style_readonly_field = true:error

# Parameter preferences
dotnet_code_quality_unused_parameters = all:suggestion

# Other rules
file_header_template = License\n--------------------------------------------------------------------------------------------------------------------\n(C) Copyright 2021 Cato Léan Trütschel and contributors\n(github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)\n\nLicensed under the Apache License, Version 2.0 (the "License")\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n--------------------------------------------------------------------------------------------------------------------
dotnet_style_prefer_simplified_boolean_expressions = true:error
dotnet_remove_unnecessary_suppression_exclusions = none:error

dotnet_style_allow_multiple_blank_lines_experimental = false:error
dotnet_style_allow_statement_immediately_after_block_experimental = false:error

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = true:suggestion
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_implicit_object_creation_when_type_is_apparent = true:error

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_switch_expression = true:warning
csharp_style_prefer_not_pattern = true:error
csharp_style_prefer_pattern_matching = true:error

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Code-block preferences
csharp_prefer_braces = false:suggestion
csharp_prefer_simple_using_statement = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

# Other rules
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:error
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:error
csharp_style_allow_embedded_statements_on_same_line_experimental = false:error

#### C# Formatting Rules ####

dotnet_diagnostic.IDE0055.severity = warning

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_i_prefix.severity = suggestion
dotnet_naming_rule.interface_should_be_i_prefix.symbols = interface
dotnet_naming_rule.interface_should_be_i_prefix.style = i_prefix

dotnet_naming_rule.types_should_be_pascal_style.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_style.symbols = types
dotnet_naming_rule.types_should_be_pascal_style.style = pascal_style

dotnet_naming_rule.non_field_should_be_pascal_style.severity = suggestion
dotnet_naming_rule.non_field_should_be_pascal_style.symbols = non_field
dotnet_naming_rule.non_field_should_be_pascal_style.style = pascal_style

dotnet_naming_rule.private_or_internal_field_should_be_underscore_prefix.severity = suggestion
dotnet_naming_rule.private_or_internal_field_should_be_underscore_prefix.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_underscore_prefix.style = underscore_prefix

dotnet_naming_rule.privates_oder_internes_static_field_should_be_underscore_prefix.severity = suggestion
dotnet_naming_rule.privates_oder_internes_static_field_should_be_underscore_prefix.symbols = privates_oder_internes_static_field
dotnet_naming_rule.privates_oder_internes_static_field_should_be_underscore_prefix.style = underscore_prefix

dotnet_naming_rule.static_field_should_be_pascal_style.severity = suggestion
dotnet_naming_rule.static_field_should_be_pascal_style.symbols = static_field
dotnet_naming_rule.static_field_should_be_pascal_style.style = pascal_style

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.static_field.applicable_kinds = field
dotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.static_field.required_modifiers = static

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private
dotnet_naming_symbols.private_or_internal_field.required_modifiers = 

dotnet_naming_symbols.privates_oder_internes_static_field.applicable_kinds = field
dotnet_naming_symbols.privates_oder_internes_static_field.applicable_accessibilities = internal, private
dotnet_naming_symbols.privates_oder_internes_static_field.required_modifiers = static

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field.applicable_accessibilities = public, internal, private, protected, protected_internal
dotnet_naming_symbols.non_field.required_modifiers = 

# Naming styles

dotnet_naming_style.pascal_style.required_prefix = 
dotnet_naming_style.pascal_style.required_suffix = 
dotnet_naming_style.pascal_style.word_separator = 
dotnet_naming_style.pascal_style.capitalization = pascal_case

dotnet_naming_style.i_prefix.required_prefix = I
dotnet_naming_style.i_prefix.required_suffix = 
dotnet_naming_style.i_prefix.word_separator = 
dotnet_naming_style.i_prefix.capitalization = pascal_case

dotnet_naming_style.underscore_prefix.required_prefix = _
dotnet_naming_style.underscore_prefix.required_suffix = 
dotnet_naming_style.underscore_prefix.word_separator = 
dotnet_naming_style.underscore_prefix.capitalization = camel_case

# Diagnostics configuration

# Array allocation for params parameter
dotnet_diagnostic.HAA0101.severity = suggestion 

# Non-overridden virtual method call on value type
dotnet_diagnostic.HAA0102.severity = suggestion 


# Implicit string concatenation allocation
dotnet_diagnostic.HAA0201.severity = suggestion 

# Value type to reference type conversion allocation for string concatenation
dotnet_diagnostic.HAA0202.severity = suggestion 


# Closure Allocation Source
dotnet_diagnostic.HAA0301.severity = suggestion 

# Display class allocation to capture closure
dotnet_diagnostic.HAA0302.severity = suggestion 

# Lambda or anonymous method in a generic method allocates a delegate instance
dotnet_diagnostic.HAA0303.severity = suggestion 


# Possible allocation of reference type enumerator
dotnet_diagnostic.HAA0401.severity = suggestion 


# Explicit new array type allocation
dotnet_diagnostic.HAA0501.severity = silent 

# Explicit new reference type allocation
dotnet_diagnostic.HAA0502.severity = silent 

# Explicit new anonymous object allocation
dotnet_diagnostic.HAA0503.severity = silent 

# Implicit new array creation allocation
dotnet_diagnostic.HAA0504.severity = silent 

# Initializer reference type allocation
dotnet_diagnostic.HAA0505.severity = silent 

# Let clause induced allocation
dotnet_diagnostic.HAA0506.severity = silent 


# Value type to reference type conversion causing boxing allocation
dotnet_diagnostic.HAA0601.severity = suggestion 

# Delegate on struct instance caused a boxing allocation
dotnet_diagnostic.HAA0602.severity = suggestion 

# Delegate allocation from a method group
dotnet_diagnostic.HAA0603.severity = suggestion 


# Use .ConfigureAwait(bool)
dotnet_diagnostic.VSTHRD111.severity = warning 

# Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = silent 