// License
// --------------------------------------------------------------------------------------------------------------------
// (C) Copyright 2021 Cato Léan Trütschel and contributors
// (github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------------------------------------------------------

#pragma warning disable VSTHRD200

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter;
using AsyncQueryableAdapterPrototype.Tests.Utils;
using Microsoft.Extensions.Options;
using Xunit;

using AsyncQueryable = System.Linq.AsyncQueryable;

namespace AsyncQueryableAdapterPrototype.Tests
{
    public abstract partial class QueryAdapterSpecificationV2
    {

        #region MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSource tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSource tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSource tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSource tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSource tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSource tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32Source tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32Source tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64Source tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64Source tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion
    }
}
