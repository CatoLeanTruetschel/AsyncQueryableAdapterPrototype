// License
// --------------------------------------------------------------------------------------------------------------------
// (C) Copyright 2021 Cato Léan Trütschel and contributors
// (github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------------------------------------------------------

#pragma warning disable VSTHRD200

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter;
using AsyncQueryableAdapterPrototype.Tests.Utils;
using Microsoft.Extensions.Options;
using Xunit;

using AsyncQueryable = System.Linq.AsyncQueryable;

namespace AsyncQueryableAdapterPrototype.Tests
{
    public abstract partial class QueryAdapterSpecificationV2
    {

        #region MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSource tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSource tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSource tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSource tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSource tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSource tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32Source tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32Source tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64Source tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64Source tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max(source);

            // Act
            var result = await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMaxTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Max<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MaxAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MaxAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion
    }
}
