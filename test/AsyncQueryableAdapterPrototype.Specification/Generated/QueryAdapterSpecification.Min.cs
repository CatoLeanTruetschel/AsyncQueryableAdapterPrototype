// License
// --------------------------------------------------------------------------------------------------------------------
// (C) Copyright 2021 Cato Léan Trütschel and contributors
// (github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------------------------------------------------------

#pragma warning disable VSTHRD200

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter;
using AsyncQueryableAdapterPrototype.Tests.Utils;
using Microsoft.Extensions.Options;
using Xunit;

using AsyncQueryable = System.Linq.AsyncQueryable;

namespace AsyncQueryableAdapterPrototype.Tests
{
    public abstract partial class QueryAdapterSpecificationV2
    {

        #region MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?, double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double?, double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double, double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDoubleSourceWithDoubleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<double, double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal, decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithDecimalSourceWithDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal, decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?, decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<decimal?, decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?, float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float?, float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float, float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithSingleSourceWithSingleSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<float, float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long, long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt64SourceWithInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long, long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int, int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithInt32SourceWithInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int, int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?, long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableInt64SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<long?, long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelector tests

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?, int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableInt32SelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorInGenericCaseWithTwoTypeSelectorNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAwaitWithCancellationAsync<int?, int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSource tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSource tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSource tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSource tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSource tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSource tests

        [Fact]
        public async Task MinAsyncWithSingleSourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32Source tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32Source tests

        [Fact]
        public async Task MinAsyncWithInt32SourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64Source tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64Source tests

        [Fact]
        public async Task MinAsyncWithInt64SourceIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min(source);

            // Act
            var result = await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            AssertHelper.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt32ResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt32ResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithNullableInt64ResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<double>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDoubleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableDecimalSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<float>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithSingleSourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt64SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region MinAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToMinTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Min<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task MinAsyncWithNullableInt32SourceWithInt64ResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.MinAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion
    }
}
