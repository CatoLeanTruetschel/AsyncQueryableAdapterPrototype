// License
// --------------------------------------------------------------------------------------------------------------------
// (C) Copyright 2021 Cato Léan Trütschel and contributors
// (github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------------------------------------------------------

#pragma warning disable VSTHRD200

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter;
using AsyncQueryableAdapterPrototype.Tests.Utils;
using Microsoft.Extensions.Options;
using Xunit;

using AsyncQueryable = System.Linq.AsyncQueryable;

namespace AsyncQueryableAdapterPrototype.Tests
{
    public abstract partial class QueryAdapterSpecificationV2
    {

        #region GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double, double>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?, decimal?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?, float?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?, double?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal, decimal>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float, float>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?, long?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?, int?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long, long>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int, int>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double, double>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?, decimal?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?, float?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?, double?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal, decimal>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float, float>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?, long?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?, int?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long, long>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int, int>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double, double>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = (p, elements, c) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncKeySelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncElementSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, CancellationToken, ValueTask<double>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?, decimal?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncKeySelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncElementSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, CancellationToken, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?, float?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = (p, elements, c) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncKeySelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncElementSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, CancellationToken, ValueTask<float?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?, double?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = (p, elements, c) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncKeySelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncElementSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, CancellationToken, ValueTask<double?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal, decimal>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = (p, elements, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncKeySelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncElementSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, CancellationToken, ValueTask<decimal>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float, float>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = (p, elements, c) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncKeySelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncElementSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, CancellationToken, ValueTask<float>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?, long?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = (p, elements, c) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncKeySelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncElementSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, CancellationToken, ValueTask<long?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?, int?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = (p, elements, c) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncKeySelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncElementSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, CancellationToken, ValueTask<int?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long, long>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = (p, elements, c) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncKeySelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncElementSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, CancellationToken, ValueTask<long>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int, int>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = (p, elements, c) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithCancellationWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncKeySelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncElementSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, CancellationToken, ValueTask<int>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwaitWithCancellation<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithSingleKeySelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithInt64KeySelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithInt32KeySelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithComparerWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithComparerWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithComparerWithSingleKeySelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithComparerWithInt64KeySelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithComparerWithInt32KeySelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double, double>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?, decimal?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?, float?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?, double?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal, decimal>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float, float>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?, long?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?, int?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long, long>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int, int>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double, double>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, double>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, double>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, double>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?, decimal?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, decimal?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, decimal?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?, float?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, float?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, float?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, float?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?, double?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, double?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, double?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, double?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal, decimal>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, decimal>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, decimal>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, decimal>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float, float>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, float>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, float>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, float>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?, long?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, long?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, long?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, long?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?, int?>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, int?>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, int?>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, int?>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long, long>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, long>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, long>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, long>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int, int>(source, keySelector, elementSelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = (p, elements) => p + 3;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, int>> asyncKeySelector = (p) => p + 3;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, int>> asyncElementSelector = (p) => p + 3;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, int>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupBy<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int>(source, keySelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int>(asyncSource, asyncKeySelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int>(asyncSource, asyncKeySelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int>(source, keySelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int>(asyncSource, asyncKeySelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int>(asyncSource, asyncKeySelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, elementSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, resultSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncResultSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithComparerWithDoubleElementSelectorWithDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithComparerWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithComparerWithNullableSingleElementSelectorWithNullableSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithComparerWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<double?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithComparerWithDecimalElementSelectorWithDecimalKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<decimal>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithComparerWithSingleElementSelectorWithSingleKeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<float>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithComparerWithNullableInt64ElementSelectorWithNullableInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithComparerWithNullableInt32ElementSelectorWithNullableInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int?>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithComparerWithInt64ElementSelectorWithInt64KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<long>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int>(source, keySelector, elementSelector, comparer);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).AwaitGroupings().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithComparerWithInt32ElementSelectorWithInt32KeySelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = null!;

            // Arrange 'comparer' parameter
            var comparer = EqualityComparer<int>.Default;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, comparer).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'keySelector' parameter
            Func<double, double> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double, double> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double, IEnumerable<double>, double> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double, double, double, double>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = (p, elements) => new ValueTask<double>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDoubleSourceWithDoubleElementSelectorWithDoubleKeySelectorWithDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncKeySelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncElementSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double, IAsyncEnumerable<double>, ValueTask<double>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double, double, double, double>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'keySelector' parameter
            Func<decimal?, decimal?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal?, decimal?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal?, IEnumerable<decimal?>, decimal?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal?, decimal?, decimal?, decimal?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = (p, elements) => new ValueTask<decimal?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDecimalSourceWithNullableDecimalElementSelectorWithNullableDecimalKeySelectorWithNullableDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncKeySelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncElementSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal?, IAsyncEnumerable<decimal?>, ValueTask<decimal?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal?, decimal?, decimal?, decimal?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'keySelector' parameter
            Func<float?, float?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float?, float?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float?, IEnumerable<float?>, float?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float?, float?, float?, float?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = (p, elements) => new ValueTask<float?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableSingleSourceWithNullableSingleElementSelectorWithNullableSingleKeySelectorWithNullableSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncKeySelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncElementSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float?, IAsyncEnumerable<float?>, ValueTask<float?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float?, float?, float?, float?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'keySelector' parameter
            Func<double?, double?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<double?, double?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<double?, IEnumerable<double?>, double?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<double?, double?, double?, double?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = (p, elements) => new ValueTask<double?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableDoubleSourceWithNullableDoubleElementSelectorWithNullableDoubleKeySelectorWithNullableDoubleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncKeySelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncElementSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<double?, IAsyncEnumerable<double?>, ValueTask<double?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<double?, double?, double?, double?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'keySelector' parameter
            Func<decimal, decimal> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<decimal, decimal> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<decimal, IEnumerable<decimal>, decimal> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<decimal, decimal, decimal, decimal>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = (p, elements) => new ValueTask<decimal>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithDecimalSourceWithDecimalElementSelectorWithDecimalKeySelectorWithDecimalResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncKeySelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncElementSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<decimal, IAsyncEnumerable<decimal>, ValueTask<decimal>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<decimal, decimal, decimal, decimal>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'keySelector' parameter
            Func<float, float> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<float, float> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<float, IEnumerable<float>, float> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<float, float, float, float>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = (p, elements) => new ValueTask<float>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithSingleSourceWithSingleElementSelectorWithSingleKeySelectorWithSingleResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncKeySelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncElementSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<float, IAsyncEnumerable<float>, ValueTask<float>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<float, float, float, float>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'keySelector' parameter
            Func<long?, long?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long?, long?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long?, IEnumerable<long?>, long?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long?, long?, long?, long?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = (p, elements) => new ValueTask<long?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt64SourceWithNullableInt64ElementSelectorWithNullableInt64KeySelectorWithNullableInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncKeySelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncElementSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long?, IAsyncEnumerable<long?>, ValueTask<long?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long?, long?, long?, long?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'keySelector' parameter
            Func<int?, int?> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int?, int?> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int?, IEnumerable<int?>, int?> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int?, int?, int?, int?>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = (p, elements) => new ValueTask<int?>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithNullableInt32SourceWithNullableInt32ElementSelectorWithNullableInt32KeySelectorWithNullableInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncKeySelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncElementSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int?, IAsyncEnumerable<int?>, ValueTask<int?>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int?, int?, int?, int?>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'keySelector' parameter
            Func<long, long> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<long, long> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<long, IEnumerable<long>, long> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<long, long, long, long>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = (p, elements) => new ValueTask<long>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt64SourceWithInt64ElementSelectorWithInt64KeySelectorWithInt64ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncKeySelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncElementSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<long, IAsyncEnumerable<long>, ValueTask<long>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<long, long, long, long>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion

        #region GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelector tests

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorIsEquivalentToGroupByTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'keySelector' parameter
            Func<int, int> keySelector = (p) => p + 3;

            // Arrange 'elementSelector' parameter
            Func<int, int> elementSelector = (p) => p + 3;

            // Arrange 'resultSelector' parameter
            Func<int, IEnumerable<int>, int> resultSelector = (p, elements) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.GroupBy<int, int, int, int>(source, keySelector, elementSelector, resultSelector);

            // Act
            var result = await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullKeySelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = null!;

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullElementSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = null!;

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = (p, elements) => new ValueTask<int>(p + 3);

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task GroupByAwaitWithInt32SourceWithInt32ElementSelectorWithInt32KeySelectorWithInt32ResultSelectorNullResultSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync(DisallowAll);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncKeySelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncKeySelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncElementSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncElementSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'asyncResultSelector' parameter
            Expression<Func<int, IAsyncEnumerable<int>, ValueTask<int>>> asyncResultSelector = null!;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.GroupByAwait<int, int, int, int>(asyncSource, asyncKeySelector, asyncElementSelector, asyncResultSelector).ToListAsync().ConfigureAwait(false);
            });
        }
        #endregion
    }
}
