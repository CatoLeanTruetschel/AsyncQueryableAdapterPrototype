// License
// --------------------------------------------------------------------------------------------------------------------
// (C) Copyright 2021 Cato Léan Trütschel and contributors
// (github.com/CatoLeanTruetschel/AsyncQueryableAdapterPrototype)
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------------------------------------------------------

#pragma warning disable VSTHRD200

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using AsyncQueryableAdapter;
using AsyncQueryableAdapterPrototype.Tests.Utils;
using Microsoft.Extensions.Options;
using Xunit;

using AsyncQueryable = System.Linq.AsyncQueryable;

namespace AsyncQueryableAdapterPrototype.Tests
{
    public abstract partial class QueryAdapterSpecificationV2
    {

        #region AverageAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = (p) => (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = (p) => (int?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = (p) => (int)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, int>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = (p) => (long?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = (p) => (long)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, long>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = (p) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = (p) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = (p) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = (p) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = (p) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = (p) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = (p) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = (p) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = (p) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = (p) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>((decimal?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = (p, c) => new ValueTask<decimal?>(p == null ? null : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = (p, c) => new ValueTask<decimal>((decimal)(p == null ? 7M : (decimal)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<decimal>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>((double?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = (p, c) => new ValueTask<double?>(p == null ? null : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = (p, c) => new ValueTask<double>((double)(p == null ? 7D : (double)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<double>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>((float?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = (p, c) => new ValueTask<float?>(p == null ? null : (float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float> selector = (p) => (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float> selector = (p) => (float)(p == null ? 7F : (float)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = (p, c) => new ValueTask<float>((float)(p == null ? 7F : (float)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithSingleResultWithSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<float>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int?> selector = (p) => (int?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>((int?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int?> selector = (p) => p == null ? null : (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p == null ? null : (int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = (p, c) => new ValueTask<int?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, int> selector = (p) => (int)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, int> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, int> selector = (p) => (int)(p == null ? 7 : (int)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = (p, c) => new ValueTask<int>((int)(p == null ? 7 : (int)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt32SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<int>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithNullableInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long?> selector = (p) => (long?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>((long?)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long?> selector = (p) => p == null ? null : (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = (p, c) => new ValueTask<long?>(p == null ? null : (long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long?>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDoubleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableDecimalSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithSingleSourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, long> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, long> selector = (p) => (long)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt64SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, long> selector = (p) => (long)(p == null ? 7L : (long)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = (p, c) => new ValueTask<long>((long)(p == null ? 7L : (long)(p + 3)));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAwaitWithCancellationAsyncWithNullableInt32SourceWithDoubleResultWithInt64SelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, CancellationToken, ValueTask<long>>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAwaitWithCancellationAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSource tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSource tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSource tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSource tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSource tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSource tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithNullableDoubleResult tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithDoubleResult tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithNullableDoubleResult tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithDoubleResult tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average(source);

            // Act
            var result = await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync(asyncSource, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal?> selector = (p) => (decimal?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = (p) => (decimal?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal?> selector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = (p) => p == null ? null : (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDecimalResultWithNullableDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, decimal> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, decimal> selector = (p) => (decimal)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = (p) => (decimal)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, decimal> selector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = (p) => (decimal)(p == null ? 7M : (decimal)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDecimalResultWithDecimalSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, decimal>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double?> selector = (p) => (double?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = (p) => (double?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double?> selector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = (p) => p == null ? null : (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableDoubleResultWithNullableDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, double> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, double> selector = (p) => (double)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = (p) => (double)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, double> selector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = (p) => (double)(p == null ? 7D : (double)(p + 3));

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithDoubleResultWithDoubleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, double>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double?>();

            // Arrange 'selector' parameter
            Func<double?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<double>();

            // Arrange 'selector' parameter
            Func<double, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<double>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<double> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDoubleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<double>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<double, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<double>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal>();

            // Arrange 'selector' parameter
            Func<decimal, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<decimal?>();

            // Arrange 'selector' parameter
            Func<decimal?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<decimal?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<decimal?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableDecimalSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<decimal?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<decimal?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<decimal?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float?>();

            // Arrange 'selector' parameter
            Func<float?, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<float>();

            // Arrange 'selector' parameter
            Func<float, float?> selector = (p) => p + 3;

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<float>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<float> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = (p) => p + 3;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithSingleSourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<float>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<float, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<float>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long>();

            // Arrange 'selector' parameter
            Func<long, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int>();

            // Arrange 'selector' parameter
            Func<int, float?> selector = (p) => (float?)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = (p) => (float?)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<long?>();

            // Arrange 'selector' parameter
            Func<long?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<long?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<long?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt64SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<long?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<long?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<long?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion

        #region AverageAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCase tests

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseIsEquivalentToAverageTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'source' parameter
            var source = GetQueryable<int?>();

            // Arrange 'selector' parameter
            Func<int?, float?> selector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Arrange 'expectedResult' parameter
            var expectedResult = Enumerable.Average<int?>(source, selector);

            // Act
            var result = await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);

            // Assert
            Assert.Equal(expectedResult, result);
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseCanceledCancellationTokenThrowsOperationCanceledExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            using var cancellationTokenSource = new CancellationTokenSource();
            var cancellationToken = cancellationTokenSource.Token;
            cancellationTokenSource.Cancel();

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<OperationCanceledException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSourceThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            IAsyncQueryable<int?> asyncSource = null!;

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = (p) => p == null ? null : (float)(p + 3);

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }

        [Fact]
        public async Task AverageAsyncWithNullableInt32SourceWithNullableSingleResultWithNullableSingleSelectorInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseInGenericCaseNullSelectorThrowsArgumentNullExceptionTest()
        {
            // Arrange

            // Arrange 'queryAdapter' parameter
            var queryAdapter = await GetQueryAdapterAsync();

            // Arrange 'asyncSource' parameter
            var asyncSource = queryAdapter.GetAsyncQueryable<int?>();

            // Arrange 'asyncSelector' parameter
            Expression<Func<int?, float?>> asyncSelector = null!;

            // Arrange 'cancellationToken' parameter
            var cancellationToken = CancellationToken.None;

            // Act
            // -

            // Assert
            await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                await AsyncQueryable.AverageAsync<int?>(asyncSource, asyncSelector, cancellationToken).ConfigureAwait(false);
            });
        }
        #endregion
    }
}
